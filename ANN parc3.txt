import numpy as np
binary_inputs = np.array([
    [0, 0, 0, 0],  # 0 (even)
    [0, 0, 0, 1],  # 1 (odd)
    [0, 0, 1, 0],  # 2 (even)
    [0, 0, 1, 1],  # 3 (odd)
    [0, 1, 0, 0],  # 4 (even)
    [0, 1, 0, 1],  # 5 (odd)
    [0, 1, 1, 0],  # 6 (even)
    [0, 1, 1, 1],  # 7 (odd)
    [1, 0, 0, 0],  # 8 (even)
    [1, 0, 0, 1]   # 9 (odd)
])
labels = np.array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
weights = np.random.rand(4)
bias = np.random.rand(1)
learning_rate = 0.1
def activation(x):
    return 1 if x >= 0 else 0
epochs = 10
for epoch in range(epochs):
    total_error = 0
    for i in range(len(binary_inputs)):
        x = binary_inputs[i]
        target = labels[i]
        output = activation(np.dot(weights, x) + bias)
        error = target - output
        total_error += abs(error)
        weights += learning_rate * error * x
        bias += learning_rate * error
def predict(num):
    if num < 0 or num > 9:
        return "Please enter a number between 0 and 9."
    binary = [int(bit) for bit in format(num, '04b')]
    output = activation(np.dot(weights, binary) + bias)
    return "Odd" if output == 1 else "Even"
while True:
    try:
        user_input = int(input("Enter a number between 0 and 9 (or -1 to exit): "))
        if user_input == -1:
            break
        print(f"Number: {user_input}, Prediction: {predict(user_input)}")
    except ValueError:
        print("Invalid input. Please enter a valid integer.")